#!/usr/bin/env bash
# 考虑好手上的活儿到底是什么。基建类的任务值得做，下大力气也值得做，只要项目还在，无论怎么改，基建都不可能拆掉；业务则有选择的做，毕竟是分分钟可能被砍掉的东西，基建稳妥才能快速做掉业务，基建做得越稳，业务做得越快，被砍掉时的成本损耗就越低。

######
# 参数列表：
#     : Only check.
#   -d: Generate documents of controller.
######

# 清理 Windows 换行符
sed -i 's/\r//g' run_file/$1

rootPath=$(cd `dirname $0`; pwd)
aimPath=`head -1 ${rootPath}/run_file/$1`

# 进入项目列表
cd ${aimPath}

git co $1
test=(`git diff --name-only HEAD~ HEAD`)

i=0
rm *maoerChecker.st
for file in "${test[@]}"
do
    # 检查后缀名，确认使用啥样的检查器
    if [[ "${file##*.}"x = "php"x ]]; then
        i=`expr ${i} + 1`
        printf "${file} - PHPLint\n - - - - - - \n" >> ${i}maoerChecker.st

        phplint ${file} >> ${i}maoerChecker.st
        ${rootPath}/lib_php/phpcheck ${file} >> ${i}maoerChecker.st
    fi

    if [[ "${file##*.}"x = "js"x ]] || [[ "${file##*.}"x = "php"x && `echo "${file}" | grep views` ]]; then
        i=`expr ${i} + 1`
        printf "${file} - JSLint\n - - - - - - \n" >> ${i}maoerChecker.st

        node_modules/eslint/bin/eslint.js -c .eslintrc.js ${file} >> ${i}maoerChecker.st
    fi

    if [[ "${file##*.}"x = "es"x ]]; then
        i=`expr ${i} + 1`
        printf "${file} - ESLint\n - - - - - - \n" >> ${i}maoerChecker.st

        eslint -c .eslintrc ${file} >> ${i}maoerChecker.st
    fi

    if [[ "${file##*.}"x = "esTest"x ]]; then
        i=`expr ${i} + 1`
        printf "${file} - ESTest\n - - - - - - \n" >> ${i}maoerChecker.st

        node_modules/.bin/mocha --compilers js:babel-core/register ${file} >> ${i}maoerChecker.st
    fi

    if [[ "${file##*.}"x = "html"x ]] || [[ "${file##*.}"x = "php"x && `echo "${file}" | grep views` ]]; then
        i=`expr ${i} + 1`
        printf "${file} - HTMLLint\n - - - - - - \n" >> ${i}maoerChecker.st

        htmllint ${file} >> ${i}maoerChecker.st
    fi

    # 生成 APIDoc 文档
    if [[ $2 = "-d" ]]; then
        if echo ${file} | grep Controller.php; then
            apidoc -f ${file} -o ${i}apidoc/
        fi
    fi
done


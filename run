#!/usr/bin/env bash
# TODO: 标准化路径中的反/斜杠
# 考虑好手上的活儿到底是什么。基建类的任务值得做，下大力气也值得做，只要项目还在，无论怎么改，基建都不可能拆掉；业务则有选择的做，毕竟是分分钟可能被砍掉的东西，基建稳妥才能快速做掉业务，基建做得越稳，业务做得越快，被砍掉时的成本损耗就越低。

rootPath=$(cd `dirname $0`; pwd)
aimPath=`head -1 $rootPath/run_file/$1`

cd $aimPath

while read -r line
do
    if [ "$line" != "$aimPath" ]
    then
        # 获取相对路径及需要做的检测
        IFS=',' file=($line)

        if [ "${file[1]}" == "php" ]
        then
#            phplint ${file[0]}
            $rootPath/lib_php/phpcheck ${file[0]}
        elif [ "${file[1]}" == "js" ]
        then
            eslint -c .eslintrc.js ${file[0]}
        elif [ "${file[1]}" == "html" ]
        then
            htmllint ${file[0]}
        fi

        if [ "${file[2]}" == "php" ]
        then
            phplint ${file[0]}
            $rootPath/lib_php/phpcheck ${file[0]}
            echo 'PHP 检查完毕'
        elif [ "${file[2]}" == "js" ]
        then
            eslint -c .eslintrc.js ${file[0]}
        elif [ "${file[2]}" == "html" ]
        then
            htmllint ${file[0]}
        fi

        if [ "${file[3]}" == "php" ]
        then
            phplint ${file[0]}
            $rootPath/lib_php/phpcheck ${file[0]}
            echo 'PHP 检查完毕'
        elif [ "${file[3]}" == "js" ]
        then
            eslint -c .eslintrc.js ${file[0]}
        elif [ "${file[3]}" == "html" ]
        then
            htmllint ${file[0]}
        fi
    fi
done < $rootPath/run_file/$1
